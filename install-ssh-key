#!/bin/bash
#
# vim: set foldmethod=marker:
#

set -x

# use key of the invoker
keyholder_user=$USER


if [[ $# -lt 1 ]] ; then
    echo "$0: copies a users public SSH key to hosts .ssh/authorized_keys."
    echo "Usage: $0 <list of server names>"
    exit
fi

if [[ "x$1" == "x-t" ]] ; then
    temporary=1
    shift
fi

declare passwd
declare -A _key_auth_available
declare -A _passwordless_sudo_available
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

get_home_dir_for_user() {
    awk -F':' "/$1/ {print \$6}" /etc/passwd
}

get_pw() {
    # don't use first in a subshell.
    # it works, but the password doesn't propagate to the global var.
    if [[ -z ${passwd} ]] ; then
        echo -n "Whatsda PASSWORD(user: $user)? " >&2
        stty -echo
        read passwd
        stty echo
        echo >&2
	SSH_AUTH_SOCK= sshpass -p "${passwd}" ssh -o ConnectTimeout=3 -o StrictHostKeyChecking=no ${user}@localhost true 2>/dev/null
	if [[ $? -ne 0 ]] ; then
	    echo "Could not log in. Incorrect password? exiting." >&2
            exit 1
        fi
        echo "Password OK." >&2
    fi
}

key_auth_available() {
    local user_host=$1
    if [[ -z ${_key_auth_available[${user_host}]} ]] ; then
        ssh -o ConnectTimeout=3 -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no -o NumberOfPasswordPrompts=0 -o StrictHostKeyChecking=no ${user_host} 'exit' 2>/dev/null
        _key_auth_available[${user_host}]=$?
        #echo "_key_auth_available=${_key_auth_available[$user_host]}"
    fi
    return ${_key_auth_available[${user_host}]}
}

passwordless_sudo_available() {
    local user_host=$1
    if [[ -z ${_passwordless_sudo_available[${user_host}]} ]] ; then
        if key_auth_available ${user_host} ; then
            ssh -q -o ConnectTimeout=3 ${user_host} "sudo -n -u root true" 2>/dev/null
            _passwordless_sudo_available[${user_host}]=$?
        else
            [[ -z ${passwd} ]] && echo "need password to ssh to ${user_host}." >&2
            get_pw
            sshpass -p "${passwd}" ssh -q -o ConnectTimeout=3 ${user_host} "sudo -n -u root true" 2>/dev/null
            _passwordless_sudo_available[${user_host}]=$?
        fi
    fi
    return ${_passwordless_sudo_available[${user_host}]}
}

exec_remote_sudo() {
    local user_host=$1
    local target_user=$2
    local remote_cmd=$3
    if key_auth_available ${user_host} ; then
        if passwordless_sudo_available ${user_host} ; then
            ssh -q -o ConnectTimeout=3 ${user_host} "sudo -u ${target_user} 2>/dev/null sh -c \"${remote_cmd}\""
            return $?
        else
            #echo "b4 get_pw in exec_remote_sudo"
            [[ -z ${passwd} ]] && echo "need password to attain root on ${user_host}." >&2
            get_pw
            ssh -q -o ConnectTimeout=3 ${user_host} "echo '$passwd' | sudo -S -u ${target_user} 2>/dev/null sh -c \"${remote_cmd}\""
            return $?
        fi
    else
        #echo "b4 get_pw in exec_remote_sudo"
        [[ -z ${passwd} ]] && echo "need password to ssh to ${user_host}." >&2
        get_pw
        if passwordless_sudo_available ${user_host} ; then
            sshpass -p "${passwd}" ssh -q -o ConnectTimeout=3 ${user_host} "sudo -u ${target_user} 2>/dev/null sh -c \"${remote_cmd}\""
            return $?
        else
            sshpass -p "${passwd}" ssh -q -o ConnectTimeout=3 ${user_host} "echo '$passwd' | sudo -S -u ${target_user} 2>/dev/null sh -c \"${remote_cmd}\""
            return $?
        fi
    fi
}


# retrieve the ansible user's ssh pub key
keyholder_home=$( get_home_dir_for_user ${keyholder_user} )
if [[ "${USER}" == "${keyholder_user}" ]] ; then
    # we are running as the same user as the one who's key we try to get.
    login_user=$( who am i | awk '{print $1}' )
    ssh_key_pub=$( cat ${keyholder_home}/.ssh/id_rsa.pub )
else
    login_user=${USER}
    # we are not ansible user. try to sudo, get passwd if necessary.
    sudo -n -u ${keyholder_user} true
    if [[ $? -eq 0 ]] ; then
        ssh_key_pub=$( sudo -u ${keyholder_user} cat ${keyholder_home}/.ssh/id_rsa.pub )
    else
        # try to sudo with passwd.
        #echo "b4 get_pw in main"
        [[ -z ${passwd} ]] && echo "need password to sudo to ${keyholder_user} on ${user_host}." >&2
        get_pw
        echo "${passwd}" | sudo -vSu ${keyholder_user} 2>/dev/null
        if [[ $? -ne 0 ]] ; then
            echo "could not sudo to ${keyholder_user} to retrieve key. exiting."
            exit 1
        else
            ssh_key_pub=$( echo "${passwd}" | sudo -Su ${keyholder_user} cat ${keyholder_home}/.ssh/id_rsa.pub )
        fi
    fi
fi

for target in "$@" ; do
    # fill target_user and host
    if echo ${target} | grep '@' >/dev/null 2>&1 ; then 
        IFS='@' read target_user host < <(echo "${target}")
    else
        host=${target}
        target_user=${USER}
    fi
    ssh_key_comment=$( echo ${ssh_key_pub} | awk '{print $NF }' )

    # make sure target host exists and is reachable
    if ! host ${host} >/dev/null ; then
        echo "Not a host: ${host}."
        continue
    fi
    if ! tcping -t 3 ${host} 22 >/dev/null ; then
        echo "Could not reach port 22 on ${host}. Host down?"
        continue
    fi

    exec_remote_sudo "${login_user}@${host}" ${target_user} "grep ${ssh_key_comment} ~${target_user}/.ssh/authorized_keys" >/dev/null
    if [[ $? -eq 0 ]] ; then
        echo "${host}: key already present."
        continue
    else
        echo "${host}: installing key for user ${keyholder_user}"
        exec_remote_sudo "${login_user}@${host}" ${target_user} "echo '${ssh_key_pub}' >>~${target_user}/.ssh/authorized_keys"
        if [[ ${temporary} -eq 1 ]] ; then
                at_command="sed -i '/${ssh_key_comment}/d' ~${target_user}/.ssh/authorized_keys"
                exec_remote_sudo "${login_user}@${host}" ${target_user} "echo ${at_command} | at midnight + 2 hours"
        fi
    fi
done

